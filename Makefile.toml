[config]
skip_core_tasks = true

[env]
CARGO_MAKE_WORKSPACE_SKIP_MEMBERS = "kernel;config;kutil"
ESP_DIR = "target/esp"
OVMF_CODE_FILE = "target/ovmf/OVMF_CODE.fd"
OVMF_VARS_FILE = "target/ovmf/OVMF_VARS.fd"
OVMF_RPM_URL = "https://www.kraxel.org/repos/jenkins/edk2/edk2.git-ovmf-x64-0-20190703.1160.g03835a8c73.noarch.rpm"

[tasks.format]
description = "Formats code using rustfmt"
install_crate = "rustfmt"
command = "cargo"
args = ["fmt"]

[tasks.clippy]
install_crate = { rustup_component_name = "clippy", bin = "cargo-clippy" }
command = "cargo"
args = ["clippy"]

[tasks.kernel]
workspace = false
command = "cargo"
args = ["xbuild", "-p", "platypos_kernel", "--target", "targets/x86_64-os.json"]

[tasks.loader]
workspace = false
command = "cargo"
args = ["xbuild", "-p", "platypos_loader", "--target", "x86_64-unknown-uefi"]

[tasks.download-ovmf]
workspace = false
condition_script = [
    "[ ! -f ${OVMF_CODE_FILE} ] || [ ! -f ${OVMF_VARS_FILE} ]"
]
script = [
'''
echo "Downloading OVMF..."

working_dir=$(mktemp -d)
function cleanup {
    echo "Cleaning up..."
    rm -rf "$working_dir"
}
trap cleanup EXIT

wget -O "$working_dir/ovmf.rpm" ${OVMF_RPM_URL}
tar xf "$working_dir/ovmf.rpm" -C "$working_dir"

mkdir -p "$(dirname ${OVMF_CODE_FILE})"
mkdir -p "$(dirname ${OVMF_VARS_FILE})"
mv "$working_dir/usr/share/edk2.git/ovmf-x64/OVMF_CODE-pure-efi.fd" ${OVMF_CODE_FILE}
mv "$working_dir/usr/share/edk2.git/ovmf-x64/OVMF_VARS-pure-efi.fd" ${OVMF_VARS_FILE}
'''
]

[tasks.create-system-partition]
workspace = false
dependencies = ["loader", "kernel"]
script = [
    "rm -rf ${ESP_DIR}",
    "mkdir -p ${ESP_DIR}/EFI/Boot",
    "cp target/x86_64-unknown-uefi/debug/platypos_loader.efi ${ESP_DIR}/EFI/Boot/Bootx64.efi",
    "cp target/x86_64-os/debug/platypos_kernel ${ESP_DIR}/platypos_kernel"
]

[tasks.run]
workspace = false
dependencies = ["create-system-partition", "download-ovmf"]
command = "qemu-system-x86_64"
args = [
    # Machine settings
    "-machine", "q35,accel=kvm:tcg",

    # Add OVMF
    "-drive", "if=pflash,format=raw,file=${OVMF_CODE_FILE},readonly=on",
    "-drive", "if=pflash,format=raw,file=${OVMF_VARS_FILE},readonly=on",

    # Mount the emulated EFI system partition
    "-drive", "format=raw,file=fat:rw:${ESP_DIR}",

    # Map the QEMU exit signal to port 0xf4
    "-device", "isa-debug-exit,iobase=0xf4,iosize=0x04",

    # Redirect the serial port to stdout
    # OVMF will also redirect UFI stdout to this
#    "-serial", "stdio",

    # Create 2 serial ports - OVMF will use one for debug output, and the kernel will use the other for logging
    # QEMU will print out the two PTYs created, which `screen` can connect to
    "-serial", "pty",
    "-serial", "pty",

    "-monitor", "stdio",

    # "-d", "cpu_reset,int,pcall,guest_errors,page",
    # "-d", "cpu_reset,int,guest_errors",
    "-d", "cpu_reset,guest_errors",

    "-S"

    # "-S", "-s"
]

# Tasks for installing tools / build dependencies

[tasks.install-rust-src]
workspace = false
install_crate = { rustup_component_name = "rust-src" }

[tasks.install-llvm-tools-preview]
workspace = false
install_crate = { rustup_component_name = "llvm-tools-preview" }

[tasks.prereqs]
workspace = false
dependencies = ["install-rust-src", "install-llvm-tools-preview"]